\documentclass[twoside,a4paper,12pt]{article}
\usepackage{mathptmx, helvet, courier}
\renewcommand\familydefault{\sfdefault}
\usepackage[german]{babel}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{float}
\usepackage{graphicx}
\usepackage{caption}
\usepackage{geometry}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{url}
\usepackage[unicode=true,pdfusetitle,
            bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
            breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
{hyperref}
\hypersetup{pdfstartview={XYZ null null 1}}
\usepackage{breakurl}
\usepackage{booktabs}
\usepackage{longtable}
\usepackage{array}
\usepackage{multirow}
\usepackage[table]{xcolor}
\usepackage{wrapfig}
\usepackage{float}
\usepackage{colortbl}
\usepackage{pdflscape}
\usepackage{tabu}
\usepackage{threeparttable}
\usepackage{fullpage}
\usepackage{pdflscape}
\usepackage{ifthen}
\usepackage{graphicx}
\usepackage{subfig}


\begin{document}

<<setup, include=FALSE, cache=FALSE, echo=FALSE, eval=TRUE>>=
library(knitr)
library(kableExtra)
options(knitr.table.format = "latex")
# set global chunk options
opts_chunk$set( fig.align='center', fig.show='hold')
options(formatR.arrow=TRUE,width=90)

sample <- paste(unlist(strsplit(sample, split = "_")), collapse = " ")
Sureselect <- sureselect_type
@

\title{\Sexpr{sample} - Report}

\author{\Sexpr{author}}
\maketitle
\tableofcontents

\clearpage
%%%% ÜBERSICHT %%%%
\section{\"{U}bersicht}

% Mutationsübersicht
<<eval=TRUE, results="tex", echo=FALSE>>=
tmp <- mutation_analysis_result$mut_tab
colnames(tmp) <- c("Mutationstyp", "Zygosit\"at", "Anzahl", "TS", "OG", "HS")
tmp2 <- data.frame(Mutationstyp = c("SNV", "InDel"),
                   Anzahl = c(sum(as.numeric(tmp[c(1:2), "Anzahl"])),
                              sum(as.numeric(tmp[c(3:4), "Anzahl"]))),
                   Tumorsuppressoren = c(sum(as.numeric(tmp[c(1:2), "TS"])),
                                         sum(as.numeric(tmp[c(3:4), "TS"]))),
                   Onkogene = c(sum(as.numeric(tmp[c(1:2), "OG"])),
                                sum(as.numeric(tmp[c(3:4), "OG"]))),
                   Hotspots = c(sum(as.numeric(tmp[c(1:2), "HS"])),
                                sum(as.numeric(tmp[c(3:4), "HS"]))))
kable(tmp2, booktabs = T, row.names = F, caption = "Zusammenfassung der identifizierten Mutationen") %>% kable_styling(latex_options = c( "hold_position"), font_size = 12)
@

% Grafiken zur Übersicht
\begin{figure}[h]
\centering
  \subfloat{\includegraphics[height = 0.8\textwidth]{\Sexpr{outfile_circos}}}
  \caption{Darstellung aller identifizierten Mutationen aus DNA und Fusionen aus RNA (im inneren Kreis). In Gelb ist der abgedeckte Breich dargestellt.}
\end{figure}

\clearpage
%%%% QUALITÄT %%%%
\section{Qualit\"{a}tskontrollen und Sequenzierungsstatistiken}

Für die Analysen werden nur Reads mit einer durchschnittlichen Basenqualität von mehr als 28 nach der \textit{Base Quality Score Recalibration} (BQSR) berücksichtigt. In Abbildung \ref{base_qual} sind die Basenqualitäten für jede Position in den Reads dargestellt. Für jede Probe einmal direkt aus dem Sequenzierer (Abb \ref{base_qual}, obere Reihe) und einmal nach der BQSR (Abb \ref{base_qual}, untere Reihe).

\begin{figure}[h]
\centering
\subfloat[Tumor Qualit\"at]{\includegraphics[width = 0.3\textwidth]{\Sexpr{tumor}}} \quad %
\subfloat[Tumor Qualit\"at nach BQSR]{\includegraphics[width = 0.3\textwidth]{\Sexpr{tumor_bsqr}}} 
\caption{Darstellung der Sequenzierung (a) als Output aus dem Sequenzierer und (b) nach der BQSR}
\label{base_qual}
\end{figure}

\subsection{Coverage}

Die Mean-Coverage und die Gesamtcoverage der Tumorprobe ist ein weiteres Qualitätsmerkmal. Sind die Werte zu niedrig, sind viele Stellen im Genom unzureichend abgedeckt. Abbildung \ref{cov_plot} zeigt die kummulative Verteilung, durch die der Anteil an targeted Basen, die von einer bestimmten Anzahl an Reads abgedeckt sind, beschrieben wird.

\begin{figure}
  \centering
  \subfloat[Coverage]{\includegraphics[width=0.4\textwidth]{\Sexpr{coverage_out}}
  \label{cov_plot}}  \quad %
  \subfloat[Reads]{%
  \begin{tabular}[b]{ll}
  \hline & Tumor \\\hline
  Mittelwert & \Sexpr{round(x =sum(stats$cover$cov[[1]][, 2] * stats$cover$cov[[1]][, 5]), digits = 2  )}\\
  Anzahl aller Reads & \Sexpr{stats$avreads$nRT} Mio. Reads \\\hline
  \end{tabular}
  }
  \label{fig:figure-and-table}
\end{figure}

\clearpage

%%%% MUTATIONSANALYSE %%%%
\section{Mutationsanalyse}
\subsection{Detaillierte \"Ubersicht}
In der Analyse werden nur seltene Mutationen mit einer \textit{Variant Allele Frequency} (VAF) über 10\% betrachtet. Gezeigt werden Mutationen vom Typ \textit{single nucleotide variation} (SNV) und \textit{Insertion and Deletions} (InDel).\\
Im Weiteren werden die Ergebnisse der Mutationsanalyse in Tabellen dargestellt. Zunächst eine Übersicht über die Anzahl der Mutationen, aufgeteilt in verschiedene Mutationstypen (Tab \ref{mut_ana_ov}). Es wird gelistet, wieviele dieser Mutationen in einem sogenannten Cancergene nach OncoKB, aufgeteilt in Tumorsuppressoren und Onkogene, identifiziert wurden. Desweiteren wird die Anzahl der sogenannten \textit{Cancer Hotspot Mutationen} (HS) nach cancerhotspots.org angegeben.\\
Die Lage der Mutationen im Genom wird, aufgeteilt nach Mutationstyp (SNVs, Indel), im Circosplot dargestellt (Abb \ref{cir_plot}). Die gelben Bereiche sind die Regionen, die das Panel abdeckt. Wenn Fusionen in der Probe identifiziert wurden, werde diese im inneren Kreis abgebildet.

<<mut_ana_ov, eval=TRUE, results="tex", echo=FALSE>>=
tmp <- mutation_analysis_result$mut_tab
colnames(tmp) <- c("Mutationstyp", "Zygosit\"at", "Anzahl", "Tumorsuppressoren", "Onkogene", "Hotspots")
tmp[c(1, 3), 2] <- "homozygot"
tmp[c(2, 4), 2] <- "heterozygot"
kable(tmp, booktabs = T, row.names = F, caption = "Zusammenfassung der identifizierten Mutationen \\label{mut_ana_ov}") %>% kable_styling(latex_options = c( "hold_position"), font_size = 9)
@

\begin{figure}[H]
\centering
\includegraphics[width=0.6\textwidth]{\Sexpr{outfile_circos}}
\caption{Circos Plot mit allen identifizierten Mutationen}
\label{cir_plot}
\end{figure}
\clearpage

\subsection{Cancer Genes}
\subsubsection{Mutationen}\label{som_mut_section}

In der folgenden Tabellen werden Gensymbol, Genname und der entsprechende Aminos\"aurenaustausch gelistet.
Die Funktion der Mutationen werden durch Abkürzungen beschrieben: nsSNV - nonsynonymous SNV, SG - stopgain, nfsDel - nonframeshift deletion, fsDel - frameshift deletion, nfsIns - nonframeshift insertion fsIns - frameshift insertion.
Die VAF wird gelistet, zusammen mit den zu Grunde liegenden Readcounts. Zunächst die Anzahl an Variantenreads, danach die Gesamtcoverage an dieser Stelle.
Außerdem werden nur seltene Mutationen gelistet. Selten bedeutet dabei, dass die \textit{Minor Allele Frequency} (MAF) unter 0.001 liegen muss, basierend auf der Datenbank gnomAD exome.
Desweiteren werden Strukturanalysen via Condel und CADD zu den entsprechend mutierten Proteinen durchgeführt. Diese Ergebnisse werden für Condel in den folgenden Tabellen durch eine Klassifizierung beschrieben: D - deleterious, N - neutral.
Die Analyse beinhaltet zusätzliche Annotationen bekannter Mutationen wie Cosmic, Clinvar und dbSNP. Die Ergebnisse werden nur reduziert und übersichtlich dargestellt. Es werden für die Mutationen hier nur die entsprechenden Cosmic Nummern angegeben.
Am Ende wird die Zuordnung des Gens als Cancergenes nach der Klassifikation von OncoKB dargestellt. \textbf{Mutationen in einem HS} sind fett markiert. Die folgende Tabelle \ref{som_mut_cg} enthält alle SNVs und InDels in Cancergenes für diese Probe.\\
Bei den Gensymbolen ist ein Link zur Mutation entsprechenden Seite von \textit{Genome Nexus} hinterlegt. Dort wird ein Lollipop-Plot zur Lage der Mutation im Gen angezeigt sowie weitere Informationen. Bei dem Aminosäurenaustausch ist ein Link zum Eintrag der Mutation in der \textit{The Variant Interpretation for Cancer Consortium Meta-Knowledgebase} verknüpft. Dieser Link funktioniert allerdings aufgrund eines Sonderzeichens in der URL nicht bei Verwendung des Dokuments mit der Vorschau von Apple.

<<som_mut_cg, eval=TRUE, results="tex", echo=FALSE>>=
tmp <- mutation_analysis_result$ts_og
if(dim(tmp)[1] == 0) {
  kable(data.frame(Gen = c("."), Genname = c("."), 'AA-Austausch' = c("."), Funktion = c("."), VAF = c("."), MAF = c("."), Condel = c("."), Cosmic = c("."), OG = c("."), TSG = c(".")), format = "latex", caption = "Es wurden keine Mutationen in Cancergenes identifiziert.\\label{som_mut_cg}", booktabs = T, longtable = T, digits = 2, row.names = F) %>% kable_styling(latex_options = c( "HOLD_position"), font_size = 9) %>% column_spec(c(2:3, 8), width = "6em") %>% column_spec(c(1, 6), width = "4em") %>% column_spec(c(4:5), width = "4em") %>% column_spec(c(7, 9:10), width = "2em") %>% row_spec(0, angle = 60)
} else {
  tmp$Gene.refGene_new <- paste0("{\\href{https://www.genomenexus.org/variant/", tmp$Chr, ":g.", tmp$Start, tmp$Ref, "\\%3E", tmp$Alt, "}{", tmp$Gene.refGene, "}}")
  hyper_refs <- paste0("https://search.cancervariants.org/\\#", tmp$Gene.refGene, "\\%20", substr(x = tmp$AAChange, start = 3, stop = nchar(tmp$AAChange)))
  tmp$AAChange <- paste0("{\\href{", hyper_refs, "}{", tmp$AAChange, "}}")
  tmp$Gene.refGene <- tmp$Gene.refGene_new
  tmp$VAF <- paste0(tmp$Variant_Allele_Frequency, " (", tmp$Variant_Reads, ")")
  tmp$VAF <- gsub(pattern = "%", replacement = "\\%", x = tmp$VAF, fixed = TRUE)
  #tmp$VAF <- gsub(pattern = "%", replacement = "", x = tmp$VAF)
  tmp$cosmic <- lapply(strsplit(x = as.character(tmp$cosmic_coding), split = "="), function(x){return(unlist(x)[2])})
  tmp$cosmic <- lapply(strsplit(x = as.character(tmp$cosmic), split = ";"), function(x){return(unlist(x)[1])})
  tmp$cosmic <- gsub(pattern = ",", replacement = ", ", x = tmp$cosmic)
  tmp$cosmic[which(is.na(tmp$cosmic))] <- "."
  tmp$ExonicFunc.refGene <- gsub(pattern = "nonsynonymous SNV", replacement = "nsSNV", x = tmp$ExonicFunc.refGene)
  tmp$ExonicFunc.refGene <- gsub(pattern = "stopgain", replacement = "SG", x = tmp$ExonicFunc.refGene)
  tmp$ExonicFunc.refGene <- gsub(pattern = "nonframeshift deletion", replacement = "nfsDel", x = tmp$ExonicFunc.refGene)
  tmp$ExonicFunc.refGene <- gsub(pattern = "frameshift deletion", replacement = "fsDel", x = tmp$ExonicFunc.refGene)
  tmp$ExonicFunc.refGene <- gsub(pattern = "nonframeshift insertion", replacement = "nfsIns", x = tmp$ExonicFunc.refGene)
  tmp$ExonicFunc.refGene <- gsub(pattern = "frameshift insertion", replacement = "fsIns", x = tmp$ExonicFunc.refGene)
  tmp$AF_nfe[is.na(tmp$AF_nfe)] <- "."
  tmp$condel.label[is.na(tmp$condel.label)] <- "."
  tmp$AAChange <- gsub(pattern = ";", replacement = "; ", x = tmp$AAChange)
  tmp <- tmp[order(as.numeric(substr(as.character(tmp$Variant_Allele_Frequency), start = 1, stop = nchar(as.character(tmp$Variant_Allele_Frequency))-1)), decreasing = TRUE), , drop = FALSE]
  id <- which(as.character(tmp$is_hotspot) != "0")
  tmp <- tmp[, c(1:2, 4, 3, 22, 12, 14, 23, 9:8)]
  colnames(tmp) <- c("Gen", "Genname", "AA-Austausch", "Funktion", "VAF (Coverage)", "MAF", "Condel", "Cosmic", "OG", "TSG")
  cap_1 <- "Alle identifizierten Mutationen in Cancergenes geordnet nach VAF.\\label{som_mut_cg}"
  if(length(id) > 0) {
  kable(tmp, format = "latex", caption = cap_1, booktabs = T, longtable = T, digits = 2, row.names = F, escape = FALSE) %>% kable_styling(latex_options = c( "HOLD_position", "repeat_header"), font_size = 9) %>% column_spec(c(2:3, 8), width = "6em") %>% column_spec(c(1, 6), width = "4em") %>% column_spec(c(4:5), width = "4em") %>% column_spec(c(7, 9:10), width = "2em") %>% row_spec(0, angle = 60) %>% row_spec(id, bold = TRUE)
  } else {
  kable(tmp, format = "latex", caption = cap_1, booktabs = T, longtable = T, digits = 2, row.names = F, escape = FALSE) %>% kable_styling(latex_options = c( "HOLD_position", "repeat_header"), font_size = 9) %>% column_spec(c(2:3, 8), width = "6em") %>% column_spec(c(1, 6), width = "4em") %>% column_spec(c(4:5), width = "4em") %>% column_spec(c(7, 9:10), width = "2em") %>% row_spec(0, angle = 60)
  }
}
@
\clearpage

\subsection{Weitere Mutationen}\label{all_som_mut}
In folgender Tabelle werden analog zur obigen alle weiteren Mutationen gelistet, die in der Probe identifiziert wurden. Auch hier sind \textbf{Mutationen in einem HS} fett markiert.

<<eval=TRUE, results="tex", echo=FALSE>>=
tmp <- mutation_analysis_result$som_mut_tab
id <- which(tmp$is_tumorsuppressor != 1 & tmp$is_oncogene != 1)
# add a hyperlink to metaKB and one to GenomeNexus
tmp$Gene.refGene_new <- paste0("{\\href{https://www.genomenexus.org/variant/", tmp$Chr, ":g.", tmp$Start, tmp$Ref, "\\%3E", tmp$Alt, "}{", tmp$Gene.refGene, "}}")
hyper_refs <- paste0("https://search.cancervariants.org/\\#", tmp$Gene.refGene, "\\%20", substr(x = tmp$AAChange, start = 3, stop = nchar(tmp$AAChange)))
tmp$AAChange <- paste0("{\\href{", hyper_refs, "}{", tmp$AAChange, "}}")
tmp$Gene.refGene <- tmp$Gene.refGene_new
tmp <- tmp[id, -c(8:9) ]
if(dim(tmp)[1] == 0) {
  kable(data.frame(Gen = c("."), Genname = c("."), 'AA-Austausch' = c("."), Funktion = c("."), VAF = c("."), MAF = c("."), Condel = c("."), Cosmic = c("."), OG = c("."), TSG = c(".")), format = "latex", caption = "Es wurden keine weiteren Mutationen identifiziert.\\label{som_mut_cg}", booktabs = T, longtable = T, digits = 2, row.names = F) %>% kable_styling(latex_options = c( "HOLD_position"), font_size = 9) %>% column_spec(c(2:3, 8), width = "6em") %>% column_spec(c(1, 6), width = "4em") %>% column_spec(c(4:5), width = "4em") %>% column_spec(c(7, 9:10), width = "2em") %>% row_spec(0, angle = 60)
} else {
  tmp$VAF <- paste0(tmp$Variant_Allele_Frequency, " (", tmp$Variant_Reads, ")")
  tmp$VAF <- gsub(pattern = "%", replacement = "\\%", x = tmp$VAF, fixed = TRUE)
  tmp$cosmic <- lapply(strsplit(x = as.character(tmp$cosmic_coding), split = "="), function(x){return(unlist(x)[2])})
  tmp$cosmic <- lapply(strsplit(x = as.character(tmp$cosmic), split = ";"), function(x){return(unlist(x)[1])})
  tmp$cosmic <- gsub(pattern = ",", replacement = ", ", x = tmp$cosmic)
  tmp$cosmic[which(is.na(tmp$cosmic))] <- "."
  tmp$ExonicFunc.refGene <- gsub(pattern = "nonsynonymous SNV", replacement = "nsSNV", x = tmp$ExonicFunc.refGene)
  tmp$ExonicFunc.refGene <- gsub(pattern = "stopgain", replacement = "SG", x = tmp$ExonicFunc.refGene)
  tmp$ExonicFunc.refGene <- gsub(pattern = "nonframeshift deletion", replacement = "nfsDel", x = tmp$ExonicFunc.refGene)
  tmp$ExonicFunc.refGene <- gsub(pattern = "frameshift deletion", replacement = "fsDel", x = tmp$ExonicFunc.refGene)
  tmp$ExonicFunc.refGene <- gsub(pattern = "nonframeshift insertion", replacement = "nfsIns", x = tmp$ExonicFunc.refGene)
  tmp$ExonicFunc.refGene <- gsub(pattern = "frameshift insertion", replacement = "fsIns", x = tmp$ExonicFunc.refGene)
  tmp$AF_nfe[is.na(tmp$AF_nfe)] <- "."
  tmp$condel.label[is.na(tmp$condel.label)] <- "."
  tmp$AAChange <- gsub(pattern = ";", replacement = "; ", x = tmp$AAChange)
  tmp <- tmp[order(as.numeric(substr(as.character(tmp$Variant_Allele_Frequency), start = 1, stop = nchar(as.character(tmp$Variant_Allele_Frequency))-1)), decreasing = TRUE), , drop = FALSE]
  id_hs <- which(tmp$is_hotspot != 0)
  tmp <- tmp[, c(1:2, 4, 3, 20, 10, 12, 21)]
  colnames(tmp) <- c("Gen", "Genname", "AA-Austausch", "Funktion", "VAF (Coverage)", "MAF", "Condel", "Cosmic")
  cap_1 <- "Alle identifizierten Mutationen geordnet nach VAF"
  if(dim(tmp)[1] != 0 & length(id_hs) > 0){
    kable(tmp, format = "latex", caption = cap_1, booktabs = T, longtable = T, digits = 2, row.names = F, escape = FALSE) %>% kable_styling(latex_options = c( "HOLD_position", "repeat_header"), font_size = 9) %>% column_spec(c(2:3, 8), width = "6em") %>% column_spec(c(1, 6), width = "5em") %>% column_spec(c(4:5), width = "4em") %>% column_spec(c(7), width = "2em") %>% row_spec(0, angle = 60) %>% row_spec(id_hs, bold = TRUE)
  } else if (dim(tmp)[1] != 0) {
      kable(tmp, format = "latex", caption = cap_1, booktabs = T, longtable = T, digits = 2, row.names = F, escape = FALSE) %>% kable_styling(latex_options = c( "HOLD_position", "repeat_header"), font_size = 9) %>% column_spec(c(2:3, 8), width = "6em") %>% column_spec(c(1, 6), width = "5em") %>% column_spec(c(4:5), width = "4em") %>% column_spec(c(7), width = "2em") %>% row_spec(0, angle = 60)
  } else {cat("Keine Mutationen identifiziert.")}
}
@

 
% %%%% MUTATIONSANALYSE %%%%
\section{Copy Number Variations}
\subsection{\"Ubersicht}
Im folgenden sind die \Sexpr{n_cnv} signifikanten Regionen mit \textit{Copy Number Variation} (CNV) als Ideogramm dargestellt (Abb \ref{ideogram}). Dabei wird über allen Chromosomen in den Zeilen die totale Anzahl an Kopien farbig markiert aufgetragen. Dabei wird  auf das Markieren von Regionen mit normaler Ploidität verzichtet. In blau dargestellt sind Verluste, je dunkler das Blau, desto weniger Kopien gibt es von dieser Region (1 oder 0). Regionen mit gesteigerten Kopien sind rot markiert, je dunkler das Rot, desto mehr Kopien gibt es in der Region (3 aufsteigend).

\begin{figure}[H]
\centering
\includegraphics[width=\textwidth]{\Sexpr{cnv_ideogram_plot}}
\caption{Copy Number Variation - Ideogramm}
\label{ideogram}
\end{figure}
\clearpage

\subsection{Cancer Genes}

Wie bei den Mutationen werden auch bei den CNVs betroffene Cancergenes (Onkogene und Tumorsuppressoren) genauer betrachtet und in folgenden Tabellen dargestellt. Dabei werden für Onkogene in Tabelle \ref{og_loss} Losse und in Tabelle \ref{og_gain} Gains von Kopien dargestellt. Das Gleiche ist analog für Tumorsuppressoren in Tabelle \ref{tsg_loss}, sowie Tabelle \ref{tsg_gain} zu sehen.

\subsubsection{Onkogene}
<<eval=TRUE, results="tex", echo=FALSE>>=
tmp <- cnv_analysis_results$cnvs_annotated$CNVOncogenes
idl <- which(tmp$status == "loss")
tmpo <- tmp[idl, c(1:2, 4)]
tmpo$Oncogene <- gsub(pattern = ",", replacement = ", ", x = tmpo$Oncogene)
colnames(tmpo) <- c("Chromosom", "Kopien", "Onkogene")
if(dim(tmpo)[1]!=0){
  kable(tmpo, format = "latex", caption = "Identifizierte Losse in Onkogenen\\label{og_loss}", booktabs = T, longtable = T, digits = 2, row.names = F) %>% kable_styling(latex_options = c( "HOLD_position", "repeat_header"), font_size = 9) %>% column_spec(c(3), width = "30em") %>% column_spec(c(1:2), width = "1em") %>% row_spec(0, angle = 60)
} else {
  cap <- "Keine Losse in Onkogenen identifiziert.\\label{og_loss}"
  kable(data.frame(Chromosom = c("."), Kopien = c("."), Onkogene = c(".")), format = "latex", caption = cap, booktabs = T, longtable = T, digits = 2, row.names = F) %>% kable_styling(latex_options = c( "HOLD_position", "repeat_header"), font_size = 9) %>% column_spec(c(3), width = "30em") %>% column_spec(c(1:2), width = "1em") %>% row_spec(0, angle = 60)
}
@

<<eval=TRUE, results="tex", echo=FALSE>>=
tmpg <- tmp[-idl, c(1:2, 4)]
tmpg$Oncogene <- gsub(pattern = ",", replacement = ", ", x = tmpg$Oncogene)
colnames(tmpg) <- colnames(tmpo)
if(dim(tmpg)[1]!=0){
  kable(tmpg, format = "latex", caption = "Identifizierte Gains in Onkogenen\\label{og_gain}", booktabs = T, longtable = T, digits = 2, row.names = F) %>% kable_styling(latex_options = c( "HOLD_position", "repeat_header"), font_size = 9) %>% column_spec(c(3), width = "30em") %>% column_spec(c(1:2), width = "1em") %>% row_spec(0, angle = 60)
}else {
  cap <- "Keine Gains in Onkogenen identifiziert.\\label{og_gain}"
  kable(data.frame(Chromosom = c("."), Kopien = c("."), Onkogene = c(".")), format = "latex", caption = cap, booktabs = T, longtable = T, digits = 2, row.names = F) %>% kable_styling(latex_options = c( "HOLD_position", "repeat_header"), font_size = 9) %>% column_spec(c(3), width = "30em") %>% column_spec(c(1:2), width = "1em") %>% row_spec(0, angle = 60)
  }
@

\subsubsection{Tumorsuppressoren}
<<eval=TRUE, results="tex", echo=FALSE>>=
tmp <- cnv_analysis_results$cnvs_annotated$CNVTumorSuppressors
idl <- which(tmp$status == "loss")
tmpo <- tmp[idl, c(1:2, 4)]
tmpo$TumorSuppressor <- gsub(pattern = ",", replacement = ", ", x = tmpo$TumorSuppressor)
colnames(tmpo) <- c("Chromosom", "Kopien", "Tumorsuppressor")
if(dim(tmpo)[1]!=0){
  kable(tmpo, format = "latex", caption = "Identifizierte Losse in Tumorsuppressoren\\label{tsg_loss}", booktabs = T, longtable = T, digits = 2, row.names = F) %>% kable_styling(latex_options = c( "HOLD_position", "repeat_header"), font_size = 9) %>% column_spec(c(3), width = "30em") %>% column_spec(c(1:2), width = "2em") %>% row_spec(0, angle = 60)
}else {
  cap <- "Keine Losse in Tumorsuppressoren identifiziert.\\label{tsg_loss}"
  kable(data.frame(Chromosom = c("."), Kopien = c("."), Onkogene = c(".")), format = "latex", caption = cap, booktabs = T, longtable = T, digits = 2, row.names = F) %>% kable_styling(latex_options = c( "HOLD_position", "repeat_header"), font_size = 9) %>% column_spec(c(3), width = "30em") %>% column_spec(c(1:2), width = "1em") %>% row_spec(0, angle = 60)
  }
@

<<eval=TRUE, results="tex", echo=FALSE>>=
tmpg <- tmp[-idl, c(1:2, 4)]
tmpg$TumorSuppressor <- gsub(pattern = ",", replacement = ", ", x = tmpg$TumorSuppressor)
colnames(tmpg) <- colnames(tmpo)
if(dim(tmpg)[1]!=0){
  kable(tmpg, format = "latex", caption = "Identifizierte Gains in Tumorsuppressoren\\label{tsg_gain}", booktabs = T, longtable = T, digits = 2, row.names = F) %>% kable_styling(latex_options = c( "HOLD_position", "repeat_header"), font_size = 9) %>% column_spec(c(3), width = "30em") %>% column_spec(c(1:2), width = "2em") %>% row_spec(0, angle = 60)
}else {
  cap <- "Keine Gains in Tumorsuppressoren identifiziert.\\label{tsg_gain}"
  kable(data.frame(Chromosom = c("."), Kopien = c("."), Onkogene = c(".")), format = "latex", caption = cap, booktabs = T, longtable = T, digits = 2, row.names = F) %>% kable_styling(latex_options = c( "HOLD_position", "repeat_header"), font_size = 9) %>% column_spec(c(3), width = "30em") %>% column_spec(c(1:2), width = "1em") %>% row_spec(0, angle = 60)
  }
@

\clearpage

\clearpage
\section{Wichtige Signalwege}\label{imp_pathways_section}
Es werden fünf wichtige Signalwege betrachtet: \textit{RAF-MEK-ERK, PI3K-AKT-mTOR, DNA-Damage-Response, Cell Cycle} und \textit{Tyrosine Kinases}. Es wird untersucht, welche Gene in diesen Signalwege eine Mutation tragen. Wenn in einem Signalweg keine Mutation identifiziert wurde, taucht er in der Tabelle nicht auf.

\subsection{Mutationen in wichtigen Signalwegen}
<<som_mut_imp_pws, echo=FALSE, eval=TRUE, results="tex">>=
options(knitr.kable.NA = ".")
tmp <- mutation_analysis_result$important_pathways
id_to <- which(tmp$Pathway == "Topart")
if(length(id_to) != 0) {
  tmp <- tmp[-c(id_to:dim(tmp)[1]), ]
}
if (length(tmp) == 0){
  cap <- "Keine Mutationen in wichtigen Signalwegen identifiziert.\\label{imp_ptws}"
  kable(data.frame(Signalweg = c("."), Gen = c("."), Genname = c("."), 'AA-Austausch' = c("."), Funktion = c("."), VAF = c("."), MAF = c("."), Condel = c("."), Cosmic = c(".")), format = "latex", caption = cap, booktabs = T, longtable = T, row.names = F) %>% kable_styling(latex_options = c( "HOLD_position", "repeat_header"), font_size = 9) %>% column_spec(c(3, 4, 9), width = "5em") %>% column_spec(c(1:2, 5:6, 7), width = "3em") %>% column_spec(c(8), width = "1em") %>% column_spec(1, bold = T) %>% row_spec(0, angle = 60)
} else{
  tmp <- tmp[ ,c("Pathway", "Symbol", "GeneName", "AAChange", "ExonicFunc", "VAF", "Reads", "MAF", "Condel", "COSMIC")]
  colnames(tmp) <- c("Pathway", "Symbol", "Gene Name", "Aminoacid Change", "ExonicFunction", "VAF", "Reads", "MAF", "Condel", "COSMIC")
  tmp$VAF <- paste0(tmp$VAF, " (", tmp$Reads, ")")
  tmp$cosmic <- lapply(strsplit(x = as.character(tmp$COSMIC), split = "="), function(x){return(unlist(x)[2])})
  tmp$cosmic <- lapply(strsplit(x = as.character(tmp$cosmic), split = ";"), function(x){return(unlist(x)[1])})
  tmp$cosmic <- gsub(pattern = ",", replacement = ", ", x = tmp$cosmic)
  tmp$ExonicFunction <- gsub(pattern = "nonsynonymous SNV", replacement = "nsSNV", x = tmp$ExonicFunction)
  tmp$ExonicFunction <- gsub(pattern = "stopgain", replacement = "SG", x = tmp$ExonicFunction)
  tmp$ExonicFunction <- gsub(pattern = "nonframeshift deletion", replacement = "nfsDel", x = tmp$ExonicFunction)
  tmp$ExonicFunction <- gsub(pattern = "frameshift deletion", replacement = "fsDel", x = tmp$ExonicFunction)
  tmp$ExonicFunction <- gsub(pattern = "nonframeshift insertion", replacement = "nfsIns", x = tmp$ExonicFunction)
  tmp$ExonicFunction <- gsub(pattern = "frameshift insertion", replacement = "fsIns", x = tmp$ExonicFunction)
  tmp <- tmp[, c(1:6, 8:9, 11)]
  dup <- which(duplicated(tmp))
  if (length(dup) > 0){
    tmp[dup, 8] <- paste0(tmp[dup, 8], ".")
  }
  colnames(tmp) <- c("Signalweg", "Gen", "Genname", "AA-Austausch", "Funktion", "VAF (Coverage)", "MAF", "Condel", "Cosmic")
  kable(tmp, format = "latex", caption = "Identifizierte Mutationen in wichtigen Signalwegen\\label{imp_ptws}", booktabs = T, longtable = T, row.names = F) %>% kable_styling(latex_options = c( "HOLD_position", "repeat_header"), font_size = 9) %>% column_spec(c(3, 4, 9), width = "5em") %>% column_spec(c(1:2, 5:6, 7), width = "3em") %>% column_spec(c(8), width = "1em") %>% column_spec(1, bold = T) %>% row_spec(0, angle = 60)
}
@

% \subsection{CNVs in wichtigen Signalwegen}


\clearpage

% TODO
%\subsection{Fusionen}
%In folgender Tabelle \ref{fs_ov} werden übersichtlich alle detektierten Fusionen mit vier wichtigen Eigenschaften (bekannt, reziprok, readthrough und Cosmic-Annotation dieser Genkombination) dargestellt. Dabei muss immer nur eines der beiden Fusionsgene in der vorgegebenen Genliste stehen. Je höher die Fusion in der Tabelle steht, desto öfter wurde die Fusion in der Probe detektiert. In der zweiten Tabelle \ref{fs_bp} werden zu den Fusionen alle möglichen Bruchpunkte in genomischen Koordinaten bezüglich \textit{hg19} beschrieben.\\
%Die dritte Tabelle zeigt für Fusionen, bei denen jeweils beide Bruchpunkte in einer codierenden Region liegen, einen Plot des Fusionsprodukten mit den erhaltenen Proteindomainen. Das sind \textit{in-frame} und \textit{out-of-frame} Fusionen. Die letzte Tabelle \ref{fs_sq} gibt die Sequenz um den Bruchpunkt an. Dabei wird aus Übersichtlichkeitsgründen die Sequenz für jedes, an der Fusion beteiligte, Gen getrennt angegeben.

<<echo=FALSE, results='tex', eval=FALSE>>=
tmp <- fusions$Fusion_OV
if (is.null(tmp)) {
  cat("Keine Fusionen identifiziert")
  } else {
  kable(tmp, format = "latex", caption = "Identifizierte Fusionen \\label{fs_ov}", booktabs = T, longtable = T, digits = 3, row.names = F) %>% kable_styling(latex_options = c("striped", "HOLD_position", "repeat_header"), font_size = 10)
}
@

<<echo=FALSE, results='tex', eval=FALSE>>=
tmp <- fusions$Table[, c(1:4, 6)]
if (!is.null(tmp)) {
  kable(tmp, format = "latex", caption = "Bruchpunkte der identifizierten Fusionen \\label{fs_bp}", booktabs = T, longtable = T, digits = 3, row.names = F) %>% kable_styling(latex_options = c("striped", "HOLD_position", "repeat_header"), font_size = 10)
}
@

<<echo=FALSE, results='tex', eval=FALSE>>=
tmp <- fusions$Plots

if(!is.null(tmp)){
  id <- which(is.na(tmp$file))
  if(length(id) > 0) {
    tmp$Gen1 <- as.character(tmp$Gen1)
    tmp$Gen1[-id] <- paste0("\\multirow{1}{*}[2cm]{", tmp$Gen1[-id], "}")
    tmp$Gen2 <- as.character(tmp$Gen2)
    tmp$Gen2[-id] <- paste0("\\multirow{1}{*}[2cm]{", tmp$Gen2[-id], "}")
    tmp$plots <- "Kein Plot verfügbar."
    tmp$plots[-id] <- paste0("\\includegraphics[height=4cm]{", tmp$file[-id], "}")
  } else {
    tmp$plots <- sprintf('![Alt text](%s)', tmp$file)
    tmp$Gen1 <- paste0("\\multirow{1}{*}[2cm]{", as.character(tmp$Gen1), "}")
    tmp$Gen2 <- paste0("\\multirow{1}{*}[2cm]{", as.character(tmp$Gen2), "}")
  }
  tmp <- tmp[, c(1:2, 5)]
  colnames(tmp)[3] <- "Ansicht des Fusionsprodukt mit Angabe der Domainen"
  kable(tmp, format = "latex", escape = FALSE, caption = "Plot  identifizierten Fusionen. Der senkrechte Strich markiert den Bruchpunkt.", booktabs = T, longtable = T, digits = 3, row.names = F) %>% kable_styling(latex_options = c("striped", "HOLD_position", "repeat_header"), font_size = 10) %>% column_spec(1,extra_css = "vertical-align:middle;")
  }
@

<<echo=FALSE, results='tex', eval=FALSE>>=
tmp <- fusions$Table[, c(1, 3, 5)]
if (!is.null(tmp)) {
  seq <- strsplit(x = as.character(tmp$Sequenz), split = "*", fixed = TRUE)
  seq1 <- unlist(lapply(seq, function(x){return(x[[1]])}))
  seq2 <- unlist(lapply(seq, function(x){return(x[[2]])}))
  k <- dim(tmp)[1]
  new_tmp <- as.data.frame(matrix(NA, ncol = 3, nrow = 2*k))
  new_tmp[seq(from = 1, to = 2*k - 1, by = 2), 1] <- paste(tmp$Gen1, tmp$Gen2, sep = "--")
  new_tmp[seq(from = 2, to = 2*k, by = 2), 1] <- paste(tmp$Gen1, tmp$Gen2, sep = "--")
  new_tmp[seq(from = 1, to = 2*k - 1, by = 2), 2] <- as.character(tmp$Gen1)
  new_tmp[seq(from = 1, to = 2*k - 1, by = 2), 3] <- paste0(seq1, "*")
  new_tmp[seq(from = 2, to = 2*k, by = 2), 2] <- as.character(tmp$Gen2)
  new_tmp[seq(from = 2, to = 2*k, by = 2), 3] <- paste0("*", seq2)
  colnames(new_tmp) <- c("Fusion", "Gen", "Sequenz")  
collapse_rows(kable(new_tmp, format = "latex", caption = "Sequenzen der identifizierten Fusionen. Der * markiert den Bruchpunkt. \\label{fs_sq}", booktabs = T, longtable = T, digits = 3, row.names = F) %>% kable_styling(latex_options = c("HOLD_position", "repeat_header"), font_size = 8))
}
@
% \clearpage

\section{Informationen zu verwendeter Software und Paketen}

\subsection{Genom}
\begin{itemize}
\item UCSC hg19
\end{itemize}

\subsection{Programmversionen}
\begin{itemize}
\item FastQC: 0.11.9
\item Trimmomatic: 0.39
\item BWA: 0.7.17
\item bam-readcount: 0.8.0
\item samtools 1.10
\item GATK: 3.8.1.0
\item picard-tools: 2.20.6
\item VarScan: 2.4.4
\item annovar 2019Oct24
\item bedtools: 2.28.0
\item Java: openjdk-8-hotspot
\end{itemize}

\subsection{Annovar Datenbanken}
\begin{itemize}
\item refGene GRCh37
\item dbnsfp35a
\item avsnp150 (dbSNP)
\item clinvar\_20180603
\item intervar\_20180118
\item cosmic90
\item gnomad\_genome Version 2.1.1
\end{itemize}

\end{document}





